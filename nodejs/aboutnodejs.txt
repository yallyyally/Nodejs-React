[웹개발자 학습 로드맵] 
문서(HTML, CSS)의 객체화 -> Document Object + Javascript 로 객체를 제어함/ 동적으로,,
[node.js 시작하기]
-what's NodeJS?
 JavaScript를 빠르게 돌아갈 수 있게 만드는 엔진. 자ㅏ바스크립트를 서버에서도 돌릴 수 있도록 하는것
논블로킹 I/O 웅앵 먼솔 ;=> 파일, 네트워크 ,,db 처리 -> 싱글 쓰레드가 이벤트 룹 도는데 별도으ㅣ 프로세스에게 넘김. 거의 병렬처리...
프로세스 하나니까 딴놈한테 넘겨!
가장 큰 특징이 머냐면,, 스레드 병렬로 ==멀티쓰레딩.. 프로세스 하나라서 쓰레드들끼리 나눠먹음(시분할, 타임 쉐어링, 양보질 -> 속도 느림) 
멀티처럼 보이지만 프로세스 하나라 멀티는 아님 
npm 명령어 정리
npm i saaa --save
이 프로젝트의 dependency
--save-dev 개발할때만 쓰고 서버 배포엔빠짐
-g 전역,, 으로 모듈 설치
비동기 test
[1강 Node JS의 개요]
자바스크립트 언어 사용 (웹브라우저가 사용하던걸 웹프레임워크에서 서버형 어플리케이션 마들 수 있도록) 
I/O== 디스크(파일). DB(내용)
멀티쓰레드 기반(이땐 동기식 IO, 한번에 클라이언트 다수 요청 처리 이때 쓰레드들간의 관계나 동작 여부 처리 어려움, 쓰레드 개수 많아지면 성능상 불리)으로 서버를 작성하면 다루기 어려움. 노드는 싱글 쓰레드라어플리케이션 작성 쉬움, 
비동기 I/O 라서 코드 작성도 쉽고 기다림 없음. 
네트워크 어플리케이션, 그중에서도 서버 분야. -> I/O 빈번하게 발생
*비동기 I/O의 의미?
 성능상 유리, 메모리 사용 측면에서도 유리 메모리 사용 사용자 늘어나도 꾸준히 유지
노드 JS 는 서버와 클라이언트(브라우저?)에서 사용하는 언어가 같다(자바스크립트)
노드 권장 분야: 실시간 SNS 데이터 중심(비동기 IO 성능 발휘) IOT
 
 
 
2번 넘어서서 5가 먼저 시행 1-2-3-2-4
 결과값을 기다려서 받아서 시행
 리턴 안쓰고컬백 함수 사용.  
 
  
 
repl - cmd 창 기반으로 코드 작성하는 환경
-node 개발 환경 - ide(이클립스), 편집기 (비주얼 스튜디오 코드)
repl 환경 실행 예제
 
*Hello World 출력하기
사용자 - gl 62 에 helloworld.js 코드 편집기로 작성
코드: console.log('Fucking world');
실행 결과
 .js 생략 가능
*서버 코드 다루고 실행하기
 
 
 
*도큐먼트
문서 보는 방법. -모듈에 대한 문서. 필요한 모듈을 로딩해서 그 클래스나 함수 사용함.
모듈은 라이브러리 같은거
*모듈 사용하기
예) Readline - 콘솔입출력에 대해
클래스(내부에 메소드), 이벤트, 모듈 함수 (이건 클래스 밖에 있음, 메소드랑 다름)
클래스가 있다면 클래스를 생성하는 함수도 있다
var rl = readline.creatInterface(); 객체 생성
*모듈 로딩
require('모듈 이름')
var readline = require('readline');
-기본 모듈; 미리 컴파일 된 상태로 라이브러리 디렉토리 설치 불ㄹ필요(node.js 라이브러리 디렉토리)
확장 모듈: npm 으로 별도 설치 - 소스와 같은 폴더/ node_modules 폴더, 상위 폴더의 node_modules
readline.createInterface(options)
input, output,completer,terminal 옵션 만들 수 있음.
var rl = readline.createInterface(
{
	input: process.stdin,
	output:process.stdout
});
이렇게 만든 객체의 메소드도 사용 가능 rl.어쩌꾸젖쩌ㅜ구
*이벤트
 이벤트핸들러(이벤트이름){} 
function(line){}
객체.on([이벤트이름],[리스너함수])
rl.on('line',function(cmd) {console.log('너 방금 타자침'+cmd);});
클래스 외부의 모듈 함수. 객체 만들지말고 모듈 로딩 하고 바로 사용 
var readline = require('readline');
readline.cursorTo(process.stdout,60,30);
*학습 정리
node.js란 비동기 방식으로 자바스크립트 언얼를 이용해서 네트워크 어플리케이션 플랫폼 제작에 적합한 프레임워크
프로그래밍 방식 -  모델 비동기 방식 콜백이용
[2강]
Node.js runtime(브라우저) - JavaScript(HTML) - Node.js Application
console.log(5); -> 5를 콘솔창에 입력
//html의 노가다를 코드로 간단히 구현 -> node js with Javascript
//요청할때마다 순간순간 웹페이지를 노드로 생성해냄
//사용자로부터 컨텐츠를 받을 수 있음.->이메일로 글받고 새로.html 만들어야 햇음 (제한됫엇음)
//새로 html 파일 생성됨. 자동으로 . 사용자의 입력에 따ㅏ\라서 (읽기, ㅅ쓰기 수정 삭제)









 